{"version":3,"sources":["components/searchBar.js","components/tagInput.js","components/detailExpand.js","components/indivStudent.js","components/listStudents.js","services/studentsService.js","components/students.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","onChange","placeholder","className","type","aria-label","e","target","value","TagInput","state","handleSubmit","event","student","onNewTagSubmit","refs","input","onSubmit","ref","Component","DetailExpand","Fragment","grades","map","grade","index","key","tags","tag","disabled","style","margin","IndivStudent","toggleDetail","setState","getIconClass","getListItemClassName","studentAverages","parseInt","reduce","accumulator","currentValue","length","this","id","src","pic","alt","border","width","firstName","lastName","toLocaleUpperCase","email","company","skill","aria-hidden","onClick","ListStudents","students","studentsCount","URL","process","getStudents","a","fetch","data","json","console","log","Students","searchName","searchTag","mapToViewModel","newStudentModel","handleNameSearch","handleTagsSearch","handleNewTagSubmit","newTag","preventDefault","indexOf","newStudentData","newStudentTags","push","matchStudentTags","match","includes","filteredStudents","filter","toLocaleLowerCase","toLowerCase","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa97b136.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBar = props => {\n  const { onChange, placeholder } = props;\n  return (\n    <div className=\"row inputBarContainer\">\n      <input\n        className=\"customSearchBar\"\n        type=\"text\"\n        placeholder={placeholder}\n        aria-label=\"Search\"\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\n\nclass TagInput extends Component {\n  state = {};\n  handleSubmit = event => {\n    const { student, onNewTagSubmit } = this.props;\n    const tag = this.refs.input.value;\n    onNewTagSubmit(event, student, tag);\n  };\n  render() {\n    return (\n      <div className=\"inputBarContainer\">\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <input\n            className=\"customTagInputBar\"\n            type=\"text\"\n            placeholder=\"Add a tag\"\n            aria-label=\"Search\"\n            ref=\"input\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TagInput;\n","import React from \"react\";\nimport TagInput from \"./tagInput\";\n\nconst DetailExpand = props => {\n  const { student, onNewTagSubmit } = props;\n  return (\n    <React.Fragment>\n      {student.grades.map((grade, index) => (\n        <li key={index}>\n          Test {index + 1}: <span className=\"tab\" /> {grade}%\n        </li>\n      ))}\n      {student.tags.map((tag, index) => (\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-md\"\n          disabled\n          key={index}\n          style={{ margin: \"0.5em\" }}\n        >\n          {tag}\n        </button>\n      ))}\n      <TagInput onNewTagSubmit={onNewTagSubmit} student={student} />\n    </React.Fragment>\n  );\n};\n\nexport default DetailExpand;\n","import React, { Component } from \"react\";\nimport DetailExpand from \"./detailExpand\";\n\nclass IndivStudent extends Component {\n  state = {\n    toggleDetail: false\n  };\n\n  toggleDetail = () => {\n    this.setState({ toggleDetail: !this.state.toggleDetail });\n  };\n\n  getIconClass = () => {\n    return this.state.toggleDetail\n      ? \"fa fa-minus customFa\"\n      : \"fa fa-plus customFa\";\n  };\n\n  getListItemClassName = index => {\n    // special case for the first list group item, get rid of its top border\n    return `list-group-item d-flex justify-content-between align-items-center row ${\n      index === 0 ? \"no-bt\" : \"\"\n    }`;\n  };\n\n  studentAverages = grades => {\n    const sum = grades\n      .map(grade => parseInt(grade))\n      .reduce((accumulator, currentValue) => accumulator + currentValue);\n    const ave = sum / grades.length;\n    return ave;\n  };\n\n  render() {\n    const { student, index, onNewTagSubmit } = this.props;\n\n    return (\n      <div key={student.id} className={this.getListItemClassName(index)}>\n        <div className=\"col\">\n          <div className=\"row\">\n            <div className=\"col-md-2\">\n              <img\n                className=\"rounded-circle mx-auto d-block\"\n                src={student.pic}\n                alt={student.id}\n                style={{\n                  border: \"1px solid #ddd\",\n                  width: \"7rem\"\n                }}\n              />\n            </div>\n            <div className=\"col-md-8\">\n              <h2 className=\"studentName\">\n                {`${student.firstName} ${student.lastName}`.toLocaleUpperCase()}\n              </h2>\n              <ul>\n                <li>Email: {student.email}</li>\n                <li>Company: {student.company}</li>\n                <li>Skill: {student.skill}</li>\n                <li>Averages: {this.studentAverages(student.grades)}%</li>\n              </ul>\n              <br />\n              <ul>\n                {this.state.toggleDetail && (\n                  <DetailExpand\n                    student={student}\n                    onNewTagSubmit={onNewTagSubmit}\n                  />\n                )}\n              </ul>\n            </div>\n            <div className=\"col justify-content-end d-flex\">\n              <span>\n                <i\n                  className={this.getIconClass()}\n                  aria-hidden=\"true\"\n                  onClick={this.toggleDetail}\n                />\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default IndivStudent;\n","import React, { Component } from \"react\";\nimport IndivStudent from \"./indivStudent\";\n\nclass ListStudents extends Component {\n  state = {};\n\n  render() {\n    let { students, studentsCount, onNewTagSubmit } = this.props;\n\n    return (\n      <React.Fragment>\n        {studentsCount !== 0 ? (\n          students.map((student, index) => (\n            <IndivStudent\n              key={student.id}\n              student={student}\n              index={index}\n              onNewTagSubmit={onNewTagSubmit}\n            />\n          ))\n        ) : (\n          <p>There are no results</p>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ListStudents;\n","const URL = process.env.REACT_APP_API_URL;\nconsole.log(URL);\n\nexport async function getStudents() {\n  const data = await fetch(URL);\n  const { students } = await data.json();\n  return students;\n}\n","import React, { Component } from \"react\";\nimport SearchBar from \"./searchBar\";\nimport ListStudents from \"./listStudents\";\nimport { getStudents } from \"../services/studentsService\";\n\nclass Students extends Component {\n  state = {\n    students: [],\n    searchName: \"\",\n    searchTag: \"\"\n  };\n\n  async componentDidMount() {\n    let students = await getStudents();\n    students = this.mapToViewModel(students);\n    this.setState({ students });\n  }\n\n  mapToViewModel = students => {\n    return students.map(student => {\n      let newStudentModel = { ...student };\n      newStudentModel.tags = [];\n      return newStudentModel;\n    });\n  };\n\n  handleNameSearch = searchName => {\n    this.setState({ searchName });\n  };\n\n  handleTagsSearch = searchTag => {\n    this.setState({ searchTag });\n  };\n\n  handleNewTagSubmit = (e, student, newTag) => {\n    e.preventDefault();\n    let students = [...this.state.students];\n    const index = students.indexOf(student);\n    let newStudentData = { ...student };\n    let newStudentTags = [...newStudentData.tags];\n    newStudentTags.push(newTag);\n    newStudentData.tags = newStudentTags;\n    students[index] = newStudentData;\n    this.setState({ students });\n  };\n\n  matchStudentTags = (student, searchTag) => {\n    let match = false;\n\n    for (const tag of student.tags) {\n      if (tag.includes(searchTag)) {\n        match = true;\n        break;\n      }\n    }\n\n    return match;\n  };\n\n  getStudents = () => {\n    const { searchName, searchTag, students: allStudents } = this.state;\n    let filteredStudents = allStudents;\n\n    if (searchName) {\n      filteredStudents = filteredStudents.filter(student =>\n        `${student.firstName} ${student.lastName}`\n          .toLocaleLowerCase()\n          .includes(searchName.toLowerCase())\n      );\n    }\n    if (searchTag) {\n      filteredStudents = filteredStudents.filter(student =>\n        this.matchStudentTags(student, searchTag)\n      );\n    }\n    return {\n      students: filteredStudents,\n      studentsCount: filteredStudents.length\n    };\n  };\n\n  render() {\n    const { students, studentsCount } = this.getStudents();\n\n    return (\n      <div className=\"container box \">\n        <div className=\"box-content customScrollbar\">\n          <ul className=\"list-group\">\n            <SearchBar\n              onChange={this.handleNameSearch}\n              placeholder=\"Search by name\"\n            />\n            <SearchBar\n              onChange={this.handleTagsSearch}\n              placeholder=\"Search by tags\"\n            />\n            <ListStudents\n              students={students}\n              studentsCount={studentsCount}\n              onNewTagSubmit={this.handleNewTagSubmit}\n            />\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Students;\n","import React from \"react\";\nimport Students from \"./components/students\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Students />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}